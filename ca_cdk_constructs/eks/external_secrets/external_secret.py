from enum import Enum
from typing import Union
from typing_extensions import deprecated

from cdk8s import ApiObjectMetadata
from constructs import Construct

from ca_cdk_constructs.eks.imports.io.external_secrets import (
    ExternalSecretV1Beta1, ExternalSecretV1Beta1Spec,
    ExternalSecretV1Beta1SpecData, ExternalSecretV1Beta1SpecDataRemoteRef,
    ExternalSecretV1Beta1SpecSecretStoreRef, ExternalSecretV1Beta1SpecTarget)


@deprecated("AWS SSM and Parameter Store secret stores are no longer created by the platform")
class ExternalSecretStore(Enum):
    """Known, existing external secret stores, created by cluster admins and having predefined names"""
    VAULT = "vault"
    AWS_SSM = "aws-secrets-manager"
    AWS_PARAMETER_STORE = "aws-parameter-store"

    def __str__(self) -> str:
        return str(self.value)


class ExternalSecretSource:
    """
    External secret source configuration.

    Usage:
        source = ExternalSecretSource(
            store=ExternalSecretStore.AWS_SSM,
            source_secret=ssm_secret_name,
            secret_mappings={"username": "DB_USER"},
        )

        app = cdk8s.App()
        chart = cdk8s.Chart(app, "ExternalSecrets")

        ExternalSecret(chart, "secret", source, {"name": "app-db-secret"})
    """

    def __init__(
        self,
        store: Union[ExternalSecretStore, str],
        source_secret: str,
        secret_mappings: dict[str, str],
    ):
        """
        Args:
            store (ExternalSecretStore): the external store that contains the source secret.
            k8s_secret_name (str): the name of the Kubernetes secret generated by ExternalSecrets
            source_secret (str): the name or id of the external secret source, e.g. Vault secret engine path or the name of a AWS Secrets Manager secret
            secret_mappings (dict[str, str]): Dictionary structure describing how to map the data in the external secret to env variables. The structure is:
                {"<source_key>": "<destination_key>"}
            e.g.
                {"password": "DB_PASSWORD"}
            To use the source secret key as destination key, set the value to None or empty string e.g.
                {"password": ""} # will set the destination key to "password"
        """

        self._store = str(store)
        self.source_secret = source_secret
        self.secret_mappings = secret_mappings

    @property
    def secret_store(self) -> str:
        return self._store


class ExternalSecret(Construct):
    """
    io.external_secrets.ExternalSecret facade which:
        - requires existing external secret stores, possibly created by a different workflow as explained in https://external-secrets.io/v0.6.1/overview/#roles-and-responsibilities
        - provides a simpler interface for creating known, supported external secrets configurations, e.g. it does not support custom [templating](https://external-secrets.io/v0.7.0-rc1/guides/templating/)
        - always uses an ExternalSecret API version that is compatible and supported in CA - managed clusters.
        - is restricted to only some supported secret stores - `~ca_cdk_constructs.eks.external_secrets.ExternalSecretStore`

    Usage:
        ExternalSecret(
            self,
            "secret",
            k8s_secret_name="app-secret", # the destination Secret in k8s will be called "app-secret"
            secret_source=ExternalSecretSource(
                store=ExternalSecretStore.VAULT,
                source_secret="path/in/vault",
                secret_mappings={
                    "key_in_vault": "KEY_IN_K8S_SECRET",
                    "key_in_vault.subkey": "KEY_IN_K8S_SECRET2",
                    "key_in_vault2": "", # sets key in secret = key in external secret, i.e 'key_in_vault2'
                }
            ),
            metadata={
                "name": "app-secret", # if a name for the ExternalSecret is not provided, it will be autogenerated by CDK
                "annotations": {"hello": "world"},
                "labels": {"foo": "bar"}
            }
        )

        ExternalSecret(
            self,
            "secret2",
            k8s_secret_name="app-secret2",
            secret_source=ExternalSecretSource(
                store=ExternalSecretStore.AWS_PARAMETER_STORE,
                source_secret="secret-1", # AWS parameter store parameter name
                secret_mappings={
                    "some_key": "KEY_IN_K8S_SECRET",
                    "some_key.subkey": "FOO",
                }
            ),
        )
    """

    def __init__(
        self,
        scope: Construct,
        id: str,
        secret_source: ExternalSecretSource,
        k8s_secret_name: str,
        metadata: Union[ApiObjectMetadata, dict] = {},
    ):
        super().__init__(scope, id)
        self._secret_source = secret_source
        self._k8s_secret_name = k8s_secret_name

        ExternalSecretV1Beta1(
            self,
            "Resource",
            metadata=metadata,
            spec=ExternalSecretV1Beta1Spec(
                secret_store_ref=ExternalSecretV1Beta1SpecSecretStoreRef(
                    name=secret_source.secret_store,
                    kind="SecretStore",  # known, existing store
                ),
                refresh_interval="1h",
                target=ExternalSecretV1Beta1SpecTarget(name=k8s_secret_name),
                data=[
                    ExternalSecretV1Beta1SpecData(
                        remote_ref=ExternalSecretV1Beta1SpecDataRemoteRef(
                            # the source ID, e.g. AWS SSM secret name or Vault path
                            key=secret_source.source_secret,
                            # which property to retrieve from provider
                            property=k,
                        ),
                        secret_key=v  # the key in the K8s secret e.g. the env var name
                        or str(k).split(".")[-1],
                        # if not specified, set the secret key = the last element of the pottentially . separated provider key
                    )
                    for k, v in secret_source.secret_mappings.items()
                ],
            ),
        )

    @property
    def k8s_secret_name(self) -> str:
        return self._k8s_secret_name

    @property
    def source_secret(self) -> str:
        return self._secret_source.source_secret

    @property
    def secret_store(self) -> str:
        return self._secret_source.secret_store
