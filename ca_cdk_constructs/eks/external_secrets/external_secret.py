from enum import Enum
from typing import Any, Union

from aws_cdk.aws_secretsmanager import ISecret
from aws_cdk.aws_ssm import StringParameter
from cdk8s import ApiObjectMetadata
from constructs import Construct

from ca_cdk_constructs.eks.imports.io.external_secrets import (
    ExternalSecretV1Beta1,
    ExternalSecretV1Beta1Spec,
    ExternalSecretV1Beta1SpecSecretStoreRef,
    ExternalSecretV1Beta1SpecTarget,
    ExternalSecretV1Beta1SpecData,
    ExternalSecretV1Beta1SpecDataRemoteRef,
)


class ExternalSecretStore(Enum):
    """Known, existing ExternalSecret Stores, created by cluster admins and having predefined names"""

    VAULT = "vault"
    AWS_SSM = "aws-secrets-manager"
    AWS_PARAMETER_STORE = "aws-parameter-store"


class IExternalSecretSource:
    """
    Convenience class providing strongly typed way to collect external secret configurations.
    This is useful when we want to collect multiple secrets from various paths in the cdk construct tree
    and then deploy them in a stack of our choice.

    In most other cases it's better to use ExternalSecret which requires an existing cdk8s chart.
    """

    def __init__(
        self, k8s_secret_name: str, source_secret: str, secret_mappings: dict[str, str], external_secret_name: str = None
    ):
        """

        Args:
            k8s_secret_name (str): The name of the Kubernetes secret generated by ExternalSecrets
            source_secret (str): the name or id of the external secret source, e.g. Vault secret engine path or the name of a AWS Secrets Manager secret
            secret_mappings (dict[str, str]): Dictionary structure describing how to map the data in the external secret to env variables. The structure is:
                ``{ <secret key>: <env variable name> }``
            e.g.
                { "password": "DB_PASSWORD" }
            To use the secret key as env variable name, set the value to None or empty string e.g.
                ``{ "password": "" } # will set env var 'password'```
            external_secret_name: (str) Optional. The name of the external secret to be created. If not set the cdk will generate one
        """
        self.k8s_secret_name = k8s_secret_name
        self.source_secret = source_secret
        self.secret_mappings = secret_mappings
        self.external_secret_name = external_secret_name

    @property
    def secret_store(self) -> ExternalSecretStore:
        return None


class ExternalVaultSecret(IExternalSecretSource):
    @property
    def secret_store(self):
        return ExternalSecretStore.VAULT


class ExternalAWSSMSecret(IExternalSecretSource):

    @property
    def secret_store(self) -> ExternalSecretStore:
        return ExternalSecretStore.AWS_SSM


class ExternalAWSParameterStoreSecret(IExternalSecretSource):

    @property
    def secret_store(self) -> ExternalSecretStore:
        return ExternalSecretStore.AWS_SSM


class ExternalSecret(Construct):
    """
    io.external_secrets.ExternalSecret facade which:
        - requires existing external secrets SecretStore(s), possibly created by a different workflow as explained in https://external-secrets.io/v0.6.1/overview/#roles-and-responsibilities
        - provides a simpler interface for creating known, supported ExternalSecret configurations, e.g. it does not support custom [templating](https://external-secrets.io/v0.7.0-rc1/guides/templating/)
        - always uses an ExternalSecrets API version that is compatible and supported in CA - managed clusters.
        - is restricted to only some supported SecretStores - `~ca_cdk_constructs.eks.external_secrets.ExternalSecretStore`

    Usage:

        ExternalSecret(self, "secret",
            k8s_secret_name="app-secret",
            secret_store=ExternalSecretStore.VAULT,
            source_secret="path/in/vault",
            secret_mappings={
                "key_in_vault": "KEY_IN_K8S_SECRET",
                "key_in_vault.subkey": "KEY_IN_K8S_SECRET2",
                "key_in_vault2": "", # sets key in secret = key in external secret, i.e 'key_in_vault2'
            }
        )

        ExternalSecret(self, "secret2",
            k8s_secret_name="app-secret2",
            secret_store=ExternalSecretStore.AWS_PARAMETER_STORE,
            source_secret="secret-1", # AWS parameter store parameter name
            secret_mappings={
                "some_key": "KEY_IN_K8S_SECRET",
                "some_key.subkey": "FOO",
            }
        )
    """

    def __init__(
        self,
        scope: Construct,
        id: str,
        k8s_secret_name: str,
        secret_store: ExternalSecretStore,
        source_secret: str,
        secret_mappings: dict[str, str],
        metadata: Union[ApiObjectMetadata, dict] = {},
    ):
        super().__init__(scope, id)
        self._k8s_secret_name = k8s_secret_name
        self._source_secret = source_secret
        self._secret_store = secret_store

        ExternalSecretV1Beta1(
            self,
            "Resource",
            metadata=metadata,
            spec=ExternalSecretV1Beta1Spec(
                secret_store_ref=ExternalSecretV1Beta1SpecSecretStoreRef(
                    name=secret_store.value, kind="SecretStore"  # known, existing store
                ),
                refresh_interval="1h",
                target=ExternalSecretV1Beta1SpecTarget(name=k8s_secret_name),
                data=[
                    ExternalSecretV1Beta1SpecData(
                        remote_ref=ExternalSecretV1Beta1SpecDataRemoteRef(
                            # the source ID, e.g. AWS SSM secret name or Vault path
                            key=source_secret,
                            # which property to retrieve from provider
                            property=k,
                        ),
                        secret_key=v  # the key in the K8s secret e.g. the env var name
                        or str(k).split(".")[-1],
                        # if not specified, set the secret key = the last element of the pottentially . separated provider key
                    )
                    for k, v in secret_mappings.items()
                ],
            ),
        )

    @property
    def k8s_secret_name(self) -> str:
        return self._k8s_secret_name

    @property
    def source_secret(self) -> str:
        return self._source_secret

    @property
    def secret_store(self) -> ExternalSecretStore:
        return self._secret_store
