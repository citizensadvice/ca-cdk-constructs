from typing import Any
from aws_cdk.aws_secretsmanager import ISecret

from ca_cdk_constructs.eks.external_secrets.secret_store import SecretStore


class ExternalSecretSource:
    """Maps the data in an external secret to env variables"""

    def __init__(self, k8s_secret_name: str, secret: Any, secret_mappings: dict[str, str]):
        """

        Args:
            k8s_secret_name (str): The name of the Kubernetes secret generated by ExternalSecrets
            secret (Any): the external secret source, e.g. Vault path or AWS SM secret object
            secret_mappings (dict[str, str]): Dictionary structure describing how to map the data in the external secret to env variables. The structure is:
                ``{ <secret key>: <env variable name> }``
            e.g.
                { "password": "DB_PASSWORD" }
            To use the secret key as env variable name, set the value to None or empty string e.g.
                ``{ "password": "" } # will set env var 'password'```
        """
        self.k8s_secret_name = k8s_secret_name
        self.secret = secret
        self.secret_mappings = secret_mappings

    def secret_store(self) -> SecretStore:
        return None

    def secret_source_id(self) -> str:
        """
        The secret source ID which will be set in spec.data.remoteRef.key
        @see https://external-secrets.io/v0.5.7/spec/#external-secrets.io/v1beta1.ExternalSecretDataRemoteRef
        """
        return str(self.secret)


class ExternalVaultSecret(ExternalSecretSource):
    def secret_store(self):
        return SecretStore.VAULT


class ExternalAWSSMSecret(ExternalSecretSource):
    def __init__(self, k8s_secret_name: str, secret: ISecret, secret_mappings: dict[str, str]):
        super().__init__(k8s_secret_name, secret, secret_mappings)

    def secret_source_id(self) -> str:
        return self.secret.secret_name

    def secret_store(self) -> SecretStore:
        return SecretStore.AWS_SSM
