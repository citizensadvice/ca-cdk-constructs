from attr import dataclass
from constructs import Construct

from aws_cdk import Stack, Fn, CfnOutput
from aws_cdk.aws_iam import Role
from aws_cdk.aws_route53 import CrossAccountZoneDelegationRecord, IPublicHostedZone


@dataclass
class R53ParentZoneConfig:
    """Contains information used to identify and change the records of a hosted zone"""

    zone_name: str
    """The name of the hosted zone where NS records will be added"""
    account_id: str
    """the ID of the AWS account where the zone is"""
    role_name: str
    """name of an existing IAM role in the parent zone account allowing changes to the zone records"""


class CrossAccountDomainDelegation(Construct):
    """Creates cross account zone delegation records for a given hosted zone.
    It requires an existing, assumable IAM role in the parent zone account with permissions to change the zone records.

    ## Example policy (it can be auto-generated by the PublicHostedZone construct):

    ```
    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "route53:ListHostedZonesByName"
                ],
                "Resource": "*"
            },
            {
                "Effect": "Allow",
                "Action": [
                    "route53:ChangeResourceRecordSets"
                ],
                "Resource": "arn:aws:route53:::hostedzone/ABCD12345DEF"
            }
        ]
    }
    ```
    """

    def __init__(
        self,
        scope: Construct,
        construct_id: str,
        parent_zone_config: R53ParentZoneConfig,
        hosted_zone: IPublicHostedZone,
    ) -> None:
        """
        parent_zone_config (R53ParentZoneConfig): the R53ParentZoneConfig object specifying how to identify and access the parent domain
        hosted_zone (IPublicHostedZone): The new zone that needs delegation
        """
        super().__init__(scope, construct_id)

        delegation_role_arn = Stack.of(self).format_arn(
            region="",
            service="iam",
            account=parent_zone_config.account_id,
            resource="role",
            resource_name=parent_zone_config.role_name,
        )

        delegation_role = Role.from_role_arn(self, "DelegationRole", delegation_role_arn)

        CrossAccountZoneDelegationRecord(
            self,
            "delegate",
            delegated_zone=hosted_zone,
            parent_hosted_zone_name=parent_zone_config.zone_name,
            delegation_role=delegation_role,
        )

        CfnOutput(
            self,
            "ParentAccountR53DelegationRoleArn",
            description="ARN of the IAM Role used to modify the parent zone records",
            value=delegation_role.role_arn,
        )

        CfnOutput(self, "Domain", value=hosted_zone.zone_name)

        CfnOutput(
            self,
            "NameServers",
            value=Fn.join(",", hosted_zone.hosted_zone_name_servers or []),
        )
