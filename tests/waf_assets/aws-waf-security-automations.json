{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "(SO0006) - AWS WAF Security Automations v3.2.0: This AWS CloudFormation template helps you provision the AWS WAF Security Automations stack without worrying about creating and configuring the underlying AWS infrastructure.\n**WARNING** This template creates multiple AWS Lambda functions, an AWS WAFv2 Web ACL, an Amazon S3 bucket, and an Amazon CloudWatch custom metric. You will be billed for the AWS resources used if you create a stack from this template.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Protection List"
                    },
                    "Parameters": [
                        "ActivateAWSManagedRulesParam",
                        "ActivateSqlInjectionProtectionParam",
                        "ActivateCrossSiteScriptingProtectionParam",
                        "ActivateHttpFloodProtectionParam",
                        "ActivateScannersProbesProtectionParam",
                        "ActivateReputationListsProtectionParam",
                        "ActivateBadBotProtectionParam"
                    ]
                },
                {
                    "Label": {
                        "default": "Log Monitoring Settings"
                    },
                    "Parameters": [
                        "EndpointType",
                        "AppAccessLogBucket",
                        "ErrorThreshold",
                        "RequestThreshold",
                        "WAFBlockPeriod",
                        "KeepDataInOriginalS3Location"
                    ]
                },
                {
                    "Label": {
                        "default": "IP Retention Settings"
                    },
                    "Parameters": [
                        "IPRetentionPeriodAllowedParam",
                        "IPRetentionPeriodDeniedParam",
                        "SNSEmailParam"
                    ]
                }
            ],
            "ParameterLabels": {
                "ActivateAWSManagedRulesParam": {
                    "default": "Activate AWS Managed Rules Protection"
                },
                "ActivateSqlInjectionProtectionParam": {
                    "default": "Activate SQL Injection Protection"
                },
                "ActivateCrossSiteScriptingProtectionParam": {
                    "default": "Activate Cross-site Scripting Protection"
                },
                "ActivateHttpFloodProtectionParam": {
                    "default": "Activate HTTP Flood Protection"
                },
                "ActivateScannersProbesProtectionParam": {
                    "default": "Activate Scanner & Probe Protection"
                },
                "ActivateReputationListsProtectionParam": {
                    "default": "Activate Reputation List Protection"
                },
                "ActivateBadBotProtectionParam": {
                    "default": "Activate Bad Bot Protection"
                },
                "EndpointType": {
                    "default": "Endpoint Type"
                },
                "AppAccessLogBucket": {
                    "default": "Application Access Log Bucket Name"
                },
                "ErrorThreshold": {
                    "default": "Error Threshold"
                },
                "RequestThreshold": {
                    "default": "Request Threshold"
                },
                "WAFBlockPeriod": {
                    "default": "WAF Block Period"
                },
                "KeepDataInOriginalS3Location": {
                    "default": "Keep Data in Original S3 Location"
                },
                "IPRetentionPeriodAllowedParam": {
                    "default": "Retention Period (Minutes) for Allowed IP Set"
                },
                "IPRetentionPeriodDeniedParam": {
                    "default": "Retention Period (Minutes) for Denied IP Set"
                },
                "SNSEmailParam": {
                    "default": "Email for receiving notifcation upon Allowed or Denied IP Sets expiration"
                }
            }
        }
    },
    "Parameters": {
        "ActivateAWSManagedRulesParam": {
            "Type": "String",
            "Default": "no",
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Description": "Choose yes to enable the AWS Managed Rules."
        },
        "ActivateSqlInjectionProtectionParam": {
            "Type": "String",
            "Default": "yes",
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Description": "Choose yes to enable the component designed to block common SQL injection attacks."
        },
        "ActivateCrossSiteScriptingProtectionParam": {
            "Type": "String",
            "Default": "yes",
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Description": "Choose yes to enable the component designed to block common XSS attacks."
        },
        "ActivateHttpFloodProtectionParam": {
            "Type": "String",
            "Default": "yes - AWS WAF rate based rule",
            "AllowedValues": [
                "yes - AWS WAF rate based rule",
                "yes - AWS Lambda log parser",
                "yes - Amazon Athena log parser",
                "no"
            ],
            "Description": "Choose yes to enable the component designed to block HTTP flood attacks."
        },
        "ActivateScannersProbesProtectionParam": {
            "Type": "String",
            "Default": "yes - AWS Lambda log parser",
            "AllowedValues": [
                "yes - AWS Lambda log parser",
                "yes - Amazon Athena log parser",
                "no"
            ],
            "Description": "Choose yes to enable the component designed to block scanners and probes."
        },
        "ActivateReputationListsProtectionParam": {
            "Type": "String",
            "Default": "yes",
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Description": "Choose yes to block requests from IP addresses on third-party reputation lists (supported lists: spamhaus, torproject, and emergingthreats)."
        },
        "ActivateBadBotProtectionParam": {
            "Type": "String",
            "Default": "yes",
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Description": "Choose yes to enable the component designed to block bad bots and content scrapers."
        },
        "EndpointType": {
            "Type": "String",
            "Default": "CloudFront",
            "AllowedValues": [
                "CloudFront",
                "ALB"
            ],
            "Description": "Select the type of resource being used."
        },
        "AppAccessLogBucket": {
            "Type": "String",
            "Default": "",
            "AllowedPattern": "(^$|^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d]$)",
            "Description": "If you chose yes for the Activate Scanners & Probes Protection parameter, enter a name for the  Amazon S3 bucket where you want to store access logs for your CloudFront distribution or Application  Load Balancer. More about bucket name restriction here: http://amzn.to/1p1YlU5.  If you chose to deactivate this protection, ignore this parameter. "
        },
        "ErrorThreshold": {
            "Type": "Number",
            "Default": 50,
            "MinValue": 0,
            "Description": "If you chose yes for the Activate Scanners & Probes Protection parameter, enter the maximum acceptable bad requests per minute per IP. If you chose to deactivate this protection protection, ignore this parameter."
        },
        "RequestThreshold": {
            "Type": "Number",
            "Default": 100,
            "MinValue": 0,
            "Description": "If you chose yes for the Activate HTTP Flood Protection parameter, enter the maximum acceptable requests per FIVE-minute period per IP address. Please note that AWS WAF rate based rule requires values greater than 100 (if you chose Lambda/Athena log parser options, you can use any value greater than zero). If you chose to deactivate this protection, ignore this parameter."
        },
        "WAFBlockPeriod": {
            "Type": "Number",
            "Default": 240,
            "MinValue": 0,
            "Description": "If you chose yes for the Activate Scanners & Probes Protection or HTTP Flood Lambda/Athena log parser parameters, enter the period (in minutes) to block applicable IP addresses. If you chose to deactivate log parsing, ignore this parameter."
        },
        "KeepDataInOriginalS3Location": {
            "Type": "String",
            "Default": "No",
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "Description": "If you chose Amazon Athena log parser for the Activate Scanners & Probes Protection parameter,  partitioning will be applied to log files and Athena queries. By default log files will be moved from their original location to a partitioned folder structure in s3. Choose Yes if you also want to keep a copy of the logs in their original location. Selecting \"Yes\" will duplicate your log storage. If you did not choose to activate Athena log parsing, ignore this parameter."
        },
        "IPRetentionPeriodAllowedParam": {
            "Type": "Number",
            "Default": -1,
            "MinValue": -1,
            "Description": "If you want to activate IP retention for the Allowed IP set, enter a number (15 or above) as the retention period (minutes).  IP addresses reaching the retention period will expire and be removed from the IP set. A minimum 15-minute retention  period is supported. If you enter a number between 0 and 15, it will be treated as 15. Leave it to default value -1  to disable IP retention."
        },
        "IPRetentionPeriodDeniedParam": {
            "Type": "Number",
            "Default": -1,
            "MinValue": -1,
            "Description": "If you want to activate IP retention for the Denied IP set, enter a number (15 or above) as the retention period (minutes).  IP addresses reaching the retention period will expire and be removed from the IP set. A minimum 15-minute retention  period is supported. If you enter a number between 0 and 15, it will be treated as 15. Leave it to default value -1  to disable IP retention."
        },
        "SNSEmailParam": {
            "Type": "String",
            "Default": "",
            "Description": "If you activated IP retention period above and want to receive an email notification when IP addresses expire, enter a valid email address. If you did not activate IP retention or want to disable email notification, leave it blank (default)."
        }
    },
    "Conditions": {
        "HttpFloodProtectionRateBasedRuleActivated": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateHttpFloodProtectionParam"
                },
                "yes - AWS WAF rate based rule"
            ]
        },
        "HttpFloodLambdaLogParser": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateHttpFloodProtectionParam"
                },
                "yes - AWS Lambda log parser"
            ]
        },
        "HttpFloodAthenaLogParser": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateHttpFloodProtectionParam"
                },
                "yes - Amazon Athena log parser"
            ]
        },
        "HttpFloodProtectionLogParserActivated": {
            "Fn::Or": [
                {
                    "Condition": "HttpFloodLambdaLogParser"
                },
                {
                    "Condition": "HttpFloodAthenaLogParser"
                }
            ]
        },
        "ScannersProbesLambdaLogParser": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateScannersProbesProtectionParam"
                },
                "yes - AWS Lambda log parser"
            ]
        },
        "ScannersProbesAthenaLogParser": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateScannersProbesProtectionParam"
                },
                "yes - Amazon Athena log parser"
            ]
        },
        "ScannersProbesProtectionActivated": {
            "Fn::Or": [
                {
                    "Condition": "ScannersProbesLambdaLogParser"
                },
                {
                    "Condition": "ScannersProbesAthenaLogParser"
                }
            ]
        },
        "AthenaLogParser": {
            "Fn::Or": [
                {
                    "Condition": "HttpFloodAthenaLogParser"
                },
                {
                    "Condition": "ScannersProbesAthenaLogParser"
                }
            ]
        },
        "LogParser": {
            "Fn::Or": [
                {
                    "Condition": "HttpFloodProtectionLogParserActivated"
                },
                {
                    "Condition": "ScannersProbesProtectionActivated"
                }
            ]
        },
        "CreateFirehoseAthenaStack": {
            "Fn::Or": [
                {
                    "Condition": "HttpFloodProtectionLogParserActivated"
                },
                {
                    "Condition": "AthenaLogParser"
                }
            ]
        },
        "ReputationListsProtectionActivated": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateReputationListsProtectionParam"
                },
                "yes"
            ]
        },
        "BadBotProtectionActivated": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateBadBotProtectionParam"
                },
                "yes"
            ]
        },
        "AlbEndpoint": {
            "Fn::Equals": [
                {
                    "Ref": "EndpointType"
                },
                "ALB"
            ]
        },
        "CustomResourceLambdaAccess": {
            "Fn::Or": [
                {
                    "Condition": "ReputationListsProtectionActivated"
                },
                {
                    "Condition": "AthenaLogParser"
                }
            ]
        },
        "IPRetentionAllwedPeriod": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "IPRetentionPeriodAllowedParam"
                        },
                        -1
                    ]
                }
            ]
        },
        "IPRetentionDeniedPeriod": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "IPRetentionPeriodDeniedParam"
                        },
                        -1
                    ]
                }
            ]
        },
        "IPRetentionPeriod": {
            "Fn::Or": [
                {
                    "Condition": "IPRetentionAllwedPeriod"
                },
                {
                    "Condition": "IPRetentionDeniedPeriod"
                }
            ]
        },
        "SNSEmailProvided": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "SNSEmailParam"
                        },
                        ""
                    ]
                }
            ]
        },
        "SNSEmail": {
            "Fn::And": [
                {
                    "Condition": "IPRetentionPeriod"
                },
                {
                    "Condition": "SNSEmailProvided"
                }
            ]
        }
    },
    "Mappings": {
        "SourceCode": {
            "General": {
                "TemplateBucket": "solutions-reference",
                "SourceBucket": "solutions",
                "KeyPrefix": "aws-waf-security-automations/v3.2.0"
            }
        },
        "Solution": {
            "Data": {
                "SendAnonymousUsageData": "Yes",
                "LogLevel": "INFO",
                "SolutionID": "SO0006",
                "MetricsURL": "https://metrics.awssolutionsbuilder.com/generic"
            },
            "Action": {
                "WAFWhitelistRule": "ALLOW",
                "WAFBlacklistRule": "BLOCK",
                "WAFSqlInjectionRule": "BLOCK",
                "WAFXssRule": "BLOCK",
                "WAFHttpFloodRateBasedRule": "BLOCK",
                "WAFHttpFloodRegularRule": "BLOCK",
                "WAFScannersProbesRule": "BLOCK",
                "WAFIPReputationListsRule": "BLOCK",
                "WAFBadBotRule": "BLOCK"
            },
            "Athena": {
                "QueryScheduledRunTime": 5
            },
            "UserAgent": {
                "UserAgentExtra": "AwsSolution/SO0006/v3.2.0"
            }
        }
    },
    "Resources": {
        "CheckRequirements": {
            "Type": "Custom::CheckRequirements",
            "Properties": {
                "AthenaLogParser": {
                    "Fn::If": [
                        "AthenaLogParser",
                        "yes",
                        "no"
                    ]
                },
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "Helper",
                        "Arn"
                    ]
                },
                "HttpFloodProtectionRateBasedRuleActivated": {
                    "Fn::If": [
                        "HttpFloodProtectionRateBasedRuleActivated",
                        "yes",
                        "no"
                    ]
                },
                "HttpFloodProtectionLogParserActivated": {
                    "Fn::If": [
                        "HttpFloodProtectionLogParserActivated",
                        "yes",
                        "no"
                    ]
                },
                "ProtectionActivatedScannersProbes": {
                    "Fn::If": [
                        "ScannersProbesProtectionActivated",
                        "yes",
                        "no"
                    ]
                },
                "AppAccessLogBucket": {
                    "Ref": "AppAccessLogBucket"
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "EndpointType": {
                    "Ref": "EndpointType"
                },
                "RequestThreshold": {
                    "Ref": "RequestThreshold"
                }
            }
        },
        "FirehoseAthenaStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Condition": "CreateFirehoseAthenaStack",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3Bucket}.s3.amazonaws.com/${KeyPrefix}/aws-waf-security-automations-firehose-athena.template",
                        {
                            "S3Bucket": {
                                "Fn::FindInMap": [
                                    "SourceCode",
                                    "General",
                                    "TemplateBucket"
                                ]
                            },
                            "KeyPrefix": {
                                "Fn::FindInMap": [
                                    "SourceCode",
                                    "General",
                                    "KeyPrefix"
                                ]
                            }
                        }
                    ]
                },
                "Parameters": {
                    "ActivateHttpFloodProtectionParam": {
                        "Ref": "ActivateHttpFloodProtectionParam"
                    },
                    "ActivateScannersProbesProtectionParam": {
                        "Ref": "ActivateScannersProbesProtectionParam"
                    },
                    "EndpointType": {
                        "Ref": "EndpointType"
                    },
                    "AppAccessLogBucket": {
                        "Ref": "AppAccessLogBucket"
                    },
                    "ParentStackName": {
                        "Ref": "AWS::StackName"
                    },
                    "WafLogBucket": {
                        "Fn::If": [
                            "HttpFloodProtectionLogParserActivated",
                            {
                                "Ref": "WafLogBucket"
                            },
                            ""
                        ]
                    },
                    "WafLogBucketArn": {
                        "Fn::If": [
                            "HttpFloodProtectionLogParserActivated",
                            {
                                "Fn::GetAtt": [
                                    "WafLogBucket",
                                    "Arn"
                                ]
                            },
                            ""
                        ]
                    },
                    "ErrorThreshold": {
                        "Ref": "ErrorThreshold"
                    },
                    "RequestThreshold": {
                        "Ref": "RequestThreshold"
                    },
                    "WAFBlockPeriod": {
                        "Ref": "WAFBlockPeriod"
                    },
                    "GlueDatabaseName": {
                        "Fn::If": [
                            "AthenaLogParser",
                            {
                                "Fn::GetAtt": [
                                    "CreateGlueDatabaseName",
                                    "DatabaseName"
                                ]
                            },
                            ""
                        ]
                    },
                    "DeliveryStreamName": {
                        "Fn::If": [
                            "HttpFloodProtectionLogParserActivated",
                            {
                                "Fn::GetAtt": [
                                    "CreateDeliveryStreamName",
                                    "DeliveryStreamName"
                                ]
                            },
                            ""
                        ]
                    },
                    "UUID": {
                        "Fn::GetAtt": [
                            "CreateUniqueID",
                            "UUID"
                        ]
                    }
                }
            }
        },
        "WebACLStack": {
            "Type": "AWS::CloudFormation::Stack",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "TemplateURL": "AWS::NoValue",
                "Parameters": {
                    "ActivateAWSManagedRulesParam": {
                        "Ref": "ActivateAWSManagedRulesParam"
                    },
                    "ActivateSqlInjectionProtectionParam": {
                        "Ref": "ActivateSqlInjectionProtectionParam"
                    },
                    "ActivateCrossSiteScriptingProtectionParam": {
                        "Ref": "ActivateCrossSiteScriptingProtectionParam"
                    },
                    "ActivateHttpFloodProtectionParam": {
                        "Ref": "ActivateHttpFloodProtectionParam"
                    },
                    "ActivateScannersProbesProtectionParam": {
                        "Ref": "ActivateScannersProbesProtectionParam"
                    },
                    "ActivateReputationListsProtectionParam": {
                        "Ref": "ActivateReputationListsProtectionParam"
                    },
                    "ActivateBadBotProtectionParam": {
                        "Ref": "ActivateBadBotProtectionParam"
                    },
                    "RequestThreshold": {
                        "Ref": "RequestThreshold"
                    },
                    "RegionScope": {
                        "Fn::If": [
                            "AlbEndpoint",
                            "REGIONAL",
                            "CLOUDFRONT"
                        ]
                    },
                    "ParentStackName": {
                        "Ref": "AWS::StackName"
                    },
                    "GlueAccessLogsDatabase": {
                        "Fn::If": [
                            "AthenaLogParser",
                            {
                                "Fn::GetAtt": [
                                    "FirehoseAthenaStack",
                                    "Outputs.GlueAccessLogsDatabase"
                                ]
                            },
                            ""
                        ]
                    },
                    "GlueAppAccessLogsTable": {
                        "Fn::If": [
                            "ScannersProbesAthenaLogParser",
                            {
                                "Fn::GetAtt": [
                                    "FirehoseAthenaStack",
                                    "Outputs.GlueAppAccessLogsTable"
                                ]
                            },
                            ""
                        ]
                    },
                    "GlueWafAccessLogsTable": {
                        "Fn::If": [
                            "HttpFloodAthenaLogParser",
                            {
                                "Fn::GetAtt": [
                                    "FirehoseAthenaStack",
                                    "Outputs.GlueWafAccessLogsTable"
                                ]
                            },
                            ""
                        ]
                    },
                    "LogLevel": {
                        "Fn::FindInMap": [
                            "Solution",
                            "Data",
                            "LogLevel"
                        ]
                    }
                }
            }
        },
        "LambdaRoleHelper": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "S3Access",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetBucketLocation",
                                        "s3:GetObject",
                                        "s3:ListBucket"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "WAFAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "wafv2:ListWebACLs"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:wafv2:${AWS::Region}:${AWS::AccountId}:regional/webacl/*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:wafv2:${AWS::Region}:${AWS::AccountId}:global/webacl/*"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "LogsAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*Helper*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "LogsAccess permission restricted to account, region and log group name substring (Helper)."
                        },
                        {
                            "id": "W76",
                            "reason": "The policy is long as it is scoped down to all the IP set ARNs and function ARNs."
                        }
                    ]
                }
            }
        },
        "LambdaRoleBadBot": {
            "Type": "AWS::IAM::Role",
            "Condition": "BadBotProtectionActivated",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LogsAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*BadBotParser*"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "CloudFormationAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudformation:DescribeStacks",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "WAFGetAndUpdateIPSet",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "wafv2:GetIPSet",
                                        "wafv2:UpdateIPSet"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "WebACLStack",
                                                "Outputs.WAFBadBotSetV4Arn"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "WebACLStack",
                                                "Outputs.WAFBadBotSetV6Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "CloudWatchAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudwatch:GetMetricStatistics",
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "LogsAccess - permission restricted to account, region and log group name substring (BadBotParser); CloudFormationAccess - account, region and stack name; CloudWatchAccess - this actions does not support resource-level permissions"
                        }
                    ]
                }
            }
        },
        "LambdaRoleReputationListsParser": {
            "Type": "AWS::IAM::Role",
            "Condition": "ReputationListsProtectionActivated",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "CloudWatchLogs",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*ReputationListsParser*"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "WAFGetAndUpdateIPSet",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "wafv2:GetIPSet",
                                        "wafv2:UpdateIPSet"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "WebACLStack",
                                                "Outputs.WAFReputationListsSetV4Arn"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "WebACLStack",
                                                "Outputs.WAFReputationListsSetV6Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "CloudFormationAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudformation:DescribeStacks",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "CloudWatchAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudwatch:GetMetricStatistics",
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "CloudWatchLogs - permission restricted to account, region and log group name substring (ReputationListsParser); CloudFormationAccess - account, region and stack name; CloudWatchAccess - this actions does not support resource-level permissions"
                        }
                    ]
                }
            }
        },
        "LambdaRoleLogParser": {
            "Type": "AWS::IAM::Role",
            "Condition": "LogParser",
            "DependsOn": "WebACLStack",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "Fn::If": [
                            "ScannersProbesProtectionActivated",
                            {
                                "PolicyName": "ScannersProbesProtectionActivatedAccess",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": "s3:GetObject",
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/*"
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": "s3:PutObject",
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/${AWS::StackName}-app_log_out.json"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/${AWS::StackName}-app_log_conf.json"
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "wafv2:GetIPSet",
                                                "wafv2:UpdateIPSet"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::GetAtt": [
                                                        "WebACLStack",
                                                        "Outputs.WAFScannersProbesSetV4Arn"
                                                    ]
                                                },
                                                {
                                                    "Fn::GetAtt": [
                                                        "WebACLStack",
                                                        "Outputs.WAFScannersProbesSetV6Arn"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "ScannersProbesAthenaLogParser",
                            {
                                "PolicyName": "ScannersProbesAthenaLogParserAccess",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "athena:GetNamedQuery",
                                                "athena:StartQueryExecution"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/WAF*"
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "s3:GetBucketLocation",
                                                "s3:GetObject",
                                                "s3:ListBucket",
                                                "s3:ListBucketMultipartUploads",
                                                "s3:ListMultipartUploadParts",
                                                "s3:AbortMultipartUpload",
                                                "s3:CreateBucket",
                                                "s3:PutObject"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/athena_results/*"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}"
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "glue:GetTable",
                                                "glue:GetPartitions"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${WebACLStack.Outputs.GlueAccessLogsDatabase}"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${WebACLStack.Outputs.GlueAccessLogsDatabase}/${WebACLStack.Outputs.GlueAppAccessLogsTable}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "HttpFloodProtectionLogParserActivated",
                            {
                                "PolicyName": "HttpFloodProtectionLogParserActivatedAccess",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": "s3:GetObject",
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${WafLogBucket}/*"
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": "s3:PutObject",
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${WafLogBucket}/${AWS::StackName}-waf_log_out.json"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${WafLogBucket}/${AWS::StackName}-waf_log_conf.json"
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "wafv2:GetIPSet",
                                                "wafv2:UpdateIPSet"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::GetAtt": [
                                                        "WebACLStack",
                                                        "Outputs.WAFHttpFloodSetV4Arn"
                                                    ]
                                                },
                                                {
                                                    "Fn::GetAtt": [
                                                        "WebACLStack",
                                                        "Outputs.WAFHttpFloodSetV6Arn"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "HttpFloodAthenaLogParser",
                            {
                                "PolicyName": "HttpFloodAthenaLogParserAccess",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "athena:GetNamedQuery",
                                                "athena:StartQueryExecution"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/WAF*"
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "s3:GetBucketLocation",
                                                "s3:GetObject",
                                                "s3:ListBucket",
                                                "s3:ListBucketMultipartUploads",
                                                "s3:ListMultipartUploadParts",
                                                "s3:AbortMultipartUpload",
                                                "s3:CreateBucket",
                                                "s3:PutObject"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${WafLogBucket}/athena_results/*"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${WafLogBucket}"
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "glue:GetTable",
                                                "glue:GetPartitions"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${WebACLStack.Outputs.GlueAccessLogsDatabase}"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${WebACLStack.Outputs.GlueAccessLogsDatabase}/${WebACLStack.Outputs.GlueWafAccessLogsTable}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "PolicyName": "LogsAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*LogParser*"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "CloudWatchAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudwatch:GetMetricStatistics",
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "LogsAccess - permission restricted to account, region and log group name substring (LogParser); CloudWatchAccess - this actions does not support resource-level permissions"
                        }
                    ]
                }
            }
        },
        "LambdaRoleCustomResource": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "S3AccessGeneralAppAccessLog",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:CreateBucket",
                                        "s3:GetBucketNotification",
                                        "s3:PutBucketNotification",
                                        "s3:PutEncryptionConfiguration",
                                        "s3:PutBucketPublicAccessBlock"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "Fn::If": [
                            "HttpFloodProtectionLogParserActivated",
                            {
                                "PolicyName": "S3AccessGeneralWafLog",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "s3:CreateBucket",
                                                "s3:GetBucketNotification",
                                                "s3:PutBucketNotification"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${WafLogBucket}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "PolicyName": "S3Access",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetBucketLocation",
                                        "s3:GetObject",
                                        "s3:ListBucket"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "Fn::If": [
                            "ScannersProbesLambdaLogParser",
                            {
                                "PolicyName": "S3AppAccessPut",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": "s3:PutObject",
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/${AWS::StackName}-app_log_conf.json"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "HttpFloodLambdaLogParser",
                            {
                                "PolicyName": "S3WafAccessPut",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": "s3:PutObject",
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${WafLogBucket}/${AWS::StackName}-waf_log_conf.json"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "CustomResourceLambdaAccess",
                            {
                                "PolicyName": "LambdaAccess",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": "lambda:InvokeFunction",
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*AddAthenaPartitions*"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*ReputationListsParser*"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "PolicyName": "WAFAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "wafv2:GetWebACL",
                                        "wafv2:UpdateWebACL",
                                        "wafv2:DeleteLoggingConfiguration"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "WebACLStack",
                                                "Outputs.WAFWebACLArn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "IPSetAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "wafv2:GetIPSet",
                                        "wafv2:DeleteIPSet"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:wafv2:${AWS::Region}:${AWS::AccountId}:regional/ipset/${AWS::StackName}*"
                                        },
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:wafv2:${AWS::Region}:${AWS::AccountId}:global/ipset/${AWS::StackName}*"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "Fn::If": [
                            "HttpFloodProtectionLogParserActivated",
                            {
                                "PolicyName": "WAFLogsAccess",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "wafv2:PutLoggingConfiguration"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::GetAtt": [
                                                        "WebACLStack",
                                                        "Outputs.WAFWebACLArn"
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": "iam:CreateServiceLinkedRole",
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:iam::*:role/aws-service-role/wafv2.amazonaws.com/AWSServiceRoleForWAFV2Logging"
                                                }
                                            ],
                                            "Condition": {
                                                "StringLike": {
                                                    "iam:AWSServiceName": "wafv2.amazonaws.com"
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "PolicyName": "CloudFormationAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudformation:DescribeStacks",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "LogsAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*CustomResource*"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "Fn::If": [
                            "ScannersProbesProtectionActivated",
                            {
                                "PolicyName": "S3BucketLoggingAccess",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "s3:GetBucketLogging",
                                                "s3:PutBucketLogging"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "WAFAccess, WAFRuleAccess, WAFIPSetAccess and WAFRateBasedRuleAccess - restricted to WafArnPrefix/AccountId; CloudFormationAccess - account, region and stack name; LogsAccess - permission restricted to account, region and log group name substring (CustomResource);"
                        },
                        {
                            "id": "W76",
                            "reason": "The policy is long as it is scoped down to all the IP set ARNs and function ARNs."
                        }
                    ]
                }
            }
        },
        "LambdaRolePartitionS3Logs": {
            "Type": "AWS::IAM::Role",
            "Condition": "ScannersProbesAthenaLogParser",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "LogsAccess - permission restricted to account, region and log group name substring (MoveS3LogsForPartition)"
                        }
                    ]
                }
            },
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "Fn::If": [
                            "ScannersProbesAthenaLogParser",
                            {
                                "PolicyName": "PartitionS3LogsAccess",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "s3:GetObject",
                                                "s3:DeleteObject",
                                                "s3:PutObject"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/*"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "PolicyName": "LogsAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*MoveS3LogsForPartition*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LambdaRoleAddAthenaPartitions": {
            "Type": "AWS::IAM::Role",
            "Condition": "AthenaLogParser",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "LogsAccess - permission restricted to account, region and log group name substring (AddAthenaPartitions)"
                        }
                    ]
                }
            },
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "Fn::If": [
                            "ScannersProbesAthenaLogParser",
                            {
                                "PolicyName": "AddAthenaPartitionsForAppAccessLog",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "s3:GetObject",
                                                "s3:PutObject",
                                                "s3:GetBucketLocation",
                                                "s3:ListBucket",
                                                "s3:ListBucketMultipartUploads",
                                                "s3:ListMultipartUploadParts",
                                                "s3:AbortMultipartUpload",
                                                "s3:CreateBucket"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/athena_results/*"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${AppAccessLogBucket}/*"
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "athena:StartQueryExecution"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/WAF*"
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "glue:GetTable",
                                                "glue:GetDatabase",
                                                "glue:UpdateDatabase",
                                                "glue:CreateDatabase",
                                                "glue:BatchCreatePartition"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/default"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${WebACLStack.Outputs.GlueAccessLogsDatabase}"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${WebACLStack.Outputs.GlueAccessLogsDatabase}/${WebACLStack.Outputs.GlueAppAccessLogsTable}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "HttpFloodAthenaLogParser",
                            {
                                "PolicyName": "AddAthenaPartitionsForWAFLog",
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "s3:GetObject",
                                                "s3:PutObject",
                                                "s3:GetBucketLocation",
                                                "s3:ListBucket",
                                                "s3:ListBucketMultipartUploads",
                                                "s3:ListMultipartUploadParts",
                                                "s3:AbortMultipartUpload",
                                                "s3:CreateBucket"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${WafLogBucket}/athena_results/*"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${WafLogBucket}"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${WafLogBucket}/*"
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "athena:StartQueryExecution"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/WAF*"
                                                }
                                            ]
                                        },
                                        {
                                            "Effect": "Allow",
                                            "Action": [
                                                "glue:GetTable",
                                                "glue:GetDatabase",
                                                "glue:UpdateDatabase",
                                                "glue:CreateDatabase",
                                                "glue:BatchCreatePartition"
                                            ],
                                            "Resource": [
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/default"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${WebACLStack.Outputs.GlueAccessLogsDatabase}"
                                                },
                                                {
                                                    "Fn::Sub": "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${WebACLStack.Outputs.GlueAccessLogsDatabase}/${WebACLStack.Outputs.GlueWafAccessLogsTable}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "PolicyName": "LogsAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*AddAthenaPartitions*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "Helper": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "This lambda function verifies the main project's dependencies, requirements and implement auxiliary functions.",
                "Handler": "helper.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRoleHelper",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "SourceBucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "helper.zip"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        },
                        "SCOPE": {
                            "Fn::If": [
                                "AlbEndpoint",
                                "REGIONAL",
                                "CLOUDFRONT"
                            ]
                        },
                        "USER_AGENT_EXTRA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "UserAgent",
                                "UserAgentExtra"
                            ]
                        }
                    }
                },
                "Runtime": "python3.8",
                "MemorySize": 128,
                "Timeout": 300
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W89",
                            "reason": "There is no need to run this lambda in a VPC"
                        },
                        {
                            "id": "W92",
                            "reason": "There is no need for Reserved Concurrency"
                        }
                    ]
                }
            }
        },
        "LambdaRoleSetIPRetention": {
            "Type": "AWS::IAM::Role",
            "Condition": "IPRetentionPeriod",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LogsAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*SetIPRetention*"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "DDBAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:PutItem"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "IPRetentionDDBTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "LogsAccess permission restricted to account, region and log group name substring (SetIPRetention)."
                        }
                    ]
                }
            }
        },
        "LambdaRoleRemoveExpiredIP": {
            "Type": "AWS::IAM::Role",
            "Condition": "IPRetentionPeriod",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LogsAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*RemoveExpiredIP*"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "WAFAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "wafv2:GetIPSet",
                                        "wafv2:UpdateIPSet"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "WebACLStack",
                                                "Outputs.WAFWhitelistSetV4Arn"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "WebACLStack",
                                                "Outputs.WAFBlacklistSetV4Arn"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "WebACLStack",
                                                "Outputs.WAFWhitelistSetV6Arn"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "WebACLStack",
                                                "Outputs.WAFBlacklistSetV6Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "DDBStreamAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:DescribeStream",
                                        "dynamodb:GetRecords",
                                        "dynamodb:ListStreams"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "IPRetentionDDBTable",
                                                "StreamArn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "InvokeLambda",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:InvokeFunction"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "IPRetentionDDBTable",
                                                "StreamArn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W11",
                            "reason": "LogsAccess permission restricted to account, region and log group name substring (RemoveExpiredIP)."
                        }
                    ]
                }
            }
        },
        "SNSPublishPolicy": {
            "Type": "AWS::IAM::Policy",
            "Condition": "SNSEmail",
            "Properties": {
                "PolicyName": "SNSPublishPolicy",
                "Roles": [
                    {
                        "Ref": "LambdaRoleRemoveExpiredIP"
                    }
                ],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "SNS:Publish"
                            ],
                            "Resource": [
                                {
                                    "Ref": "IPExpirationSNSTopic"
                                }
                            ]
                        }
                    ]
                }
            }
        },
        "CreateUniqueID": {
            "Type": "Custom::CreateUUID",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "Helper",
                        "Arn"
                    ]
                }
            }
        },
        "CreateDeliveryStreamName": {
            "Type": "Custom::CreateDeliveryStreamName",
            "Condition": "HttpFloodProtectionLogParserActivated",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "Helper",
                        "Arn"
                    ]
                },
                "StackName": {
                    "Ref": "AWS::StackName"
                }
            }
        },
        "CreateGlueDatabaseName": {
            "Type": "Custom::CreateGlueDatabaseName",
            "Condition": "AthenaLogParser",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "Helper",
                        "Arn"
                    ]
                },
                "StackName": {
                    "Ref": "AWS::StackName"
                }
            }
        },
        "WafLogBucket": {
            "Type": "AWS::S3::Bucket",
            "Condition": "HttpFloodProtectionLogParserActivated",
            "DependsOn": "CheckRequirements",
            "DeletionPolicy": "Retain",
            "UpdateReplacePolicy": "Retain",
            "Properties": {
                "AccessControl": "Private",
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                },
                "LoggingConfiguration": {
                    "DestinationBucketName": {
                        "Ref": "AccessLoggingBucket"
                    },
                    "LogFilePrefix": "WAF_Logs/"
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W51",
                            "reason": "WafLogBucket does not require a bucket policy."
                        }
                    ]
                }
            }
        },
        "AccessLoggingBucket": {
            "Type": "AWS::S3::Bucket",
            "Condition": "LogParser",
            "DependsOn": "CheckRequirements",
            "DeletionPolicy": "Retain",
            "UpdateReplacePolicy": "Retain",
            "Properties": {
                "AccessControl": "LogDeliveryWrite",
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W35",
                            "reason": "This bucket is an access logging bucket for another bucket and does not require access logging to be configured for it."
                        }
                    ]
                }
            }
        },
        "AccessLoggingBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Condition": "LogParser",
            "Properties": {
                "Bucket": {
                    "Ref": "AccessLoggingBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "s3:*",
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            },
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "AccessLoggingBucket",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "/",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "AccessLoggingBucket",
                                                    "Arn"
                                                ]
                                            },
                                            "*"
                                        ]
                                    ]
                                }
                            ],
                            "Sid": "HttpsOnly"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            }
        },
        "LogParser": {
            "Type": "AWS::Lambda::Function",
            "Condition": "LogParser",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W89",
                            "reason": "There is no need to run this lambda in a VPC"
                        },
                        {
                            "id": "W92",
                            "reason": "There is no need for Reserved Concurrency"
                        }
                    ]
                }
            },
            "Properties": {
                "Description": "This function parses access logs to identify suspicious behavior, such as an abnormal amount of errors. It then blocks those IP addresses for a customer-defined period of time.",
                "Handler": "log-parser.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRoleLogParser",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "SourceBucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "log_parser.zip"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "APP_ACCESS_LOG_BUCKET": {
                            "Fn::If": [
                                "ScannersProbesProtectionActivated",
                                {
                                    "Ref": "AppAccessLogBucket"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "WAF_ACCESS_LOG_BUCKET": {
                            "Fn::If": [
                                "HttpFloodProtectionLogParserActivated",
                                {
                                    "Ref": "WafLogBucket"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "SEND_ANONYMOUS_USAGE_DATA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "SendAnonymousUsageData"
                            ]
                        },
                        "UUID": {
                            "Fn::GetAtt": [
                                "CreateUniqueID",
                                "UUID"
                            ]
                        },
                        "LIMIT_IP_ADDRESS_RANGES_PER_IP_MATCH_CONDITION": "10000",
                        "MAX_AGE_TO_UPDATE": "30",
                        "REGION": {
                            "Ref": "AWS::Region"
                        },
                        "SCOPE": {
                            "Fn::If": [
                                "AlbEndpoint",
                                "REGIONAL",
                                "CLOUDFRONT"
                            ]
                        },
                        "LOG_TYPE": {
                            "Fn::If": [
                                "AlbEndpoint",
                                "alb",
                                "cloudfront"
                            ]
                        },
                        "METRIC_NAME_PREFIX": {
                            "Fn::Join": [
                                "",
                                {
                                    "Fn::Split": [
                                        "-",
                                        {
                                            "Ref": "AWS::StackName"
                                        }
                                    ]
                                }
                            ]
                        },
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        },
                        "STACK_NAME": {
                            "Ref": "AWS::StackName"
                        },
                        "IP_SET_ID_HTTP_FLOODV4": {
                            "Fn::If": [
                                "HttpFloodProtectionLogParserActivated",
                                {
                                    "Fn::GetAtt": [
                                        "WebACLStack",
                                        "Outputs.WAFHttpFloodSetV4Arn"
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "IP_SET_ID_HTTP_FLOODV6": {
                            "Fn::If": [
                                "HttpFloodProtectionLogParserActivated",
                                {
                                    "Fn::GetAtt": [
                                        "WebACLStack",
                                        "Outputs.WAFHttpFloodSetV6Arn"
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "IP_SET_NAME_HTTP_FLOODV4": {
                            "Fn::If": [
                                "HttpFloodProtectionLogParserActivated",
                                {
                                    "Fn::GetAtt": [
                                        "WebACLStack",
                                        "Outputs.NameHttpFloodSetV4"
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "IP_SET_NAME_HTTP_FLOODV6": {
                            "Fn::If": [
                                "HttpFloodProtectionLogParserActivated",
                                {
                                    "Fn::GetAtt": [
                                        "WebACLStack",
                                        "Outputs.NameHttpFloodSetV6"
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "IP_SET_ID_SCANNERS_PROBESV4": {
                            "Fn::If": [
                                "ScannersProbesProtectionActivated",
                                {
                                    "Fn::GetAtt": [
                                        "WebACLStack",
                                        "Outputs.WAFScannersProbesSetV4Arn"
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "IP_SET_ID_SCANNERS_PROBESV6": {
                            "Fn::If": [
                                "ScannersProbesProtectionActivated",
                                {
                                    "Fn::GetAtt": [
                                        "WebACLStack",
                                        "Outputs.WAFScannersProbesSetV6Arn"
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "IP_SET_NAME_SCANNERS_PROBESV4": {
                            "Fn::If": [
                                "ScannersProbesProtectionActivated",
                                {
                                    "Fn::GetAtt": [
                                        "WebACLStack",
                                        "Outputs.NameScannersProbesSetV4"
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "IP_SET_NAME_SCANNERS_PROBESV6": {
                            "Fn::If": [
                                "ScannersProbesProtectionActivated",
                                {
                                    "Fn::GetAtt": [
                                        "WebACLStack",
                                        "Outputs.NameScannersProbesSetV6"
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "WAF_BLOCK_PERIOD": {
                            "Ref": "WAFBlockPeriod"
                        },
                        "ERROR_THRESHOLD": {
                            "Ref": "ErrorThreshold"
                        },
                        "REQUEST_THRESHOLD": {
                            "Ref": "RequestThreshold"
                        },
                        "SOLUTION_ID": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "SolutionID"
                            ]
                        },
                        "METRICS_URL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "MetricsURL"
                            ]
                        },
                        "USER_AGENT_EXTRA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "UserAgent",
                                "UserAgentExtra"
                            ]
                        }
                    }
                },
                "Runtime": "python3.8",
                "MemorySize": 512,
                "Timeout": 300
            }
        },
        "MoveS3LogsForPartition": {
            "Type": "AWS::Lambda::Function",
            "Condition": "ScannersProbesAthenaLogParser",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W89",
                            "reason": "There is no need to run this lambda in a VPC"
                        },
                        {
                            "id": "W92",
                            "reason": "There is no need for Reserved Concurrency"
                        }
                    ]
                }
            },
            "Properties": {
                "Description": "This function is triggered by S3 event to move log files(upon their arrival in s3) from their original location to a partitioned folder structure created per timestamps in file names, hence allowing the usage of partitioning within AWS Athena.",
                "Handler": "partition_s3_logs.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRolePartitionS3Logs",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "SourceBucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "log_parser.zip"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        },
                        "KEEP_ORIGINAL_DATA": {
                            "Ref": "KeepDataInOriginalS3Location"
                        },
                        "ENDPOINT": {
                            "Ref": "EndpointType"
                        },
                        "USER_AGENT_EXTRA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "UserAgent",
                                "UserAgentExtra"
                            ]
                        }
                    }
                },
                "Runtime": "python3.8",
                "MemorySize": 512,
                "Timeout": 300
            }
        },
        "AddAthenaPartitions": {
            "Type": "AWS::Lambda::Function",
            "Condition": "AthenaLogParser",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W89",
                            "reason": "There is no need to run this lambda in a VPC"
                        },
                        {
                            "id": "W92",
                            "reason": "There is no need for Reserved Concurrency"
                        }
                    ]
                }
            },
            "Properties": {
                "Description": "This function adds a new hourly partition to athena table. It runs every hour, triggered by a CloudWatch event.",
                "Handler": "add_athena_partitions.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRoleAddAthenaPartitions",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "SourceBucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "log_parser.zip"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        },
                        "USER_AGENT_EXTRA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "UserAgent",
                                "UserAgentExtra"
                            ]
                        }
                    }
                },
                "Runtime": "python3.8",
                "MemorySize": 512,
                "Timeout": 300
            }
        },
        "SetIPRetention": {
            "Type": "AWS::Lambda::Function",
            "Condition": "IPRetentionPeriod",
            "Properties": {
                "Description": "This lambda function processes CW events for WAF UpdateIPSet API calls. It writes relevant ip retention data into a DynamoDB table.",
                "Handler": "set_ip_retention.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRoleSetIPRetention",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "SourceBucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "ip_retention_handler.zip"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        },
                        "TABLE_NAME": {
                            "Ref": "IPRetentionDDBTable"
                        },
                        "STACK_NAME": {
                            "Ref": "AWS::StackName"
                        },
                        "IP_RETENTION_PEROID_ALLOWED_MINUTE": {
                            "Ref": "IPRetentionPeriodAllowedParam"
                        },
                        "IP_RETENTION_PEROID_DENIED_MINUTE": {
                            "Ref": "IPRetentionPeriodDeniedParam"
                        },
                        "REMOVE_EXPIRED_IP_LAMBDA_ROLE_NAME": {
                            "Ref": "LambdaRoleRemoveExpiredIP"
                        },
                        "USER_AGENT_EXTRA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "UserAgent",
                                "UserAgentExtra"
                            ]
                        }
                    }
                },
                "Runtime": "python3.8",
                "MemorySize": 128,
                "Timeout": 300
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W89",
                            "reason": "There is no need to run this lambda in a VPC"
                        },
                        {
                            "id": "W92",
                            "reason": "There is no need for Reserved Concurrency"
                        }
                    ]
                }
            }
        },
        "RemoveExpiredIP": {
            "Type": "AWS::Lambda::Function",
            "Condition": "IPRetentionPeriod",
            "Properties": {
                "Description": "This lambda function processes the DDB streams records (IP) expired by TTL. It removes expired IPs from WAF allowed or denied IP sets.",
                "Handler": "remove_expired_ip.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRoleRemoveExpiredIP",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "SourceBucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "ip_retention_handler.zip"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        },
                        "SNS_EMAIL": {
                            "Fn::If": [
                                "SNSEmail",
                                "yes",
                                "no"
                            ]
                        },
                        "SNS_TOPIC_ARN": {
                            "Fn::If": [
                                "SNSEmail",
                                {
                                    "Ref": "IPExpirationSNSTopic"
                                },
                                ""
                            ]
                        },
                        "SEND_ANONYMOUS_USAGE_DATA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "SendAnonymousUsageData"
                            ]
                        },
                        "UUID": {
                            "Fn::GetAtt": [
                                "CreateUniqueID",
                                "UUID"
                            ]
                        },
                        "SOLUTION_ID": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "SolutionID"
                            ]
                        },
                        "METRICS_URL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "MetricsURL"
                            ]
                        },
                        "USER_AGENT_EXTRA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "UserAgent",
                                "UserAgentExtra"
                            ]
                        }
                    }
                },
                "Runtime": "python3.8",
                "MemorySize": 512,
                "Timeout": 300
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W89",
                            "reason": "There is no need to run this lambda in a VPC"
                        },
                        {
                            "id": "W92",
                            "reason": "There is no need for Reserved Concurrency"
                        }
                    ]
                }
            }
        },
        "LambdaInvokePermissionAppLogParserS3": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "LogParser",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LogParser",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "s3.amazonaws.com",
                "SourceAccount": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "LambdaInvokePermissionMoveS3LogsForPartition": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "ScannersProbesAthenaLogParser",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "MoveS3LogsForPartition",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "s3.amazonaws.com",
                "SourceAccount": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "LambdaPermissionAddAthenaPartitions": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "AthenaLogParser",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AddAthenaPartitions",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "LambdaAddAthenaPartitionsEventsRule",
                        "Arn"
                    ]
                }
            }
        },
        "LambdaInvokePermissionSetIPRetention": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "IPRetentionPeriod",
            "Properties": {
                "FunctionName": {
                    "Ref": "SetIPRetention"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "SetIPRetentionEventsRule",
                        "Arn"
                    ]
                }
            }
        },
        "LambdaAthenaWAFLogParser": {
            "Type": "AWS::Events::Rule",
            "Condition": "HttpFloodAthenaLogParser",
            "Properties": {
                "Description": "Security Automation - WAF Logs Athena parser",
                "ScheduleExpression": {
                    "Fn::Join": [
                        "",
                        [
                            "rate(",
                            {
                                "Fn::FindInMap": [
                                    "Solution",
                                    "Athena",
                                    "QueryScheduledRunTime"
                                ]
                            },
                            " minutes)"
                        ]
                    ]
                },
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "LogParser",
                                "Arn"
                            ]
                        },
                        "Id": "LogParser",
                        "Input": {
                            "Fn::Sub": "{\n  \"resourceType\": \"LambdaAthenaWAFLogParser\",\n  \"glueAccessLogsDatabase\": \"${FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase}\",\n  \"accessLogBucket\": \"${WafLogBucket}\",\n  \"glueWafAccessLogsTable\": \"${FirehoseAthenaStack.Outputs.GlueWafAccessLogsTable}\",\n  \"athenaWorkGroup\":\"${FirehoseAthenaStack.Outputs.WAFLogAthenaQueryWorkGroup}\"\n}\n"
                        }
                    }
                ]
            }
        },
        "LambdaInvokePermissionWafLogParserCloudWatch": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "HttpFloodAthenaLogParser",
            "Properties": {
                "FunctionName": {
                    "Ref": "LogParser"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "LambdaAthenaWAFLogParser",
                        "Arn"
                    ]
                }
            }
        },
        "LambdaAthenaAppLogParser": {
            "Type": "AWS::Events::Rule",
            "Condition": "ScannersProbesAthenaLogParser",
            "Properties": {
                "Description": "Security Automation - App Logs Athena parser",
                "ScheduleExpression": "rate(5 minutes)",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "LogParser",
                                "Arn"
                            ]
                        },
                        "Id": "LogParser",
                        "Input": {
                            "Fn::Sub": "{\n  \"resourceType\": \"LambdaAthenaAppLogParser\",\n  \"glueAccessLogsDatabase\": \"${FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase}\",\n  \"accessLogBucket\": \"${AppAccessLogBucket}\",\n  \"glueAppAccessLogsTable\": \"${FirehoseAthenaStack.Outputs.GlueAppAccessLogsTable}\",\n  \"athenaWorkGroup\": \"${FirehoseAthenaStack.Outputs.WAFAppAccessLogAthenaQueryWorkGroup}\"\n}\n"
                        }
                    }
                ]
            }
        },
        "LambdaAddAthenaPartitionsEventsRule": {
            "Type": "AWS::Events::Rule",
            "Condition": "AthenaLogParser",
            "Properties": {
                "Description": "Security Automations - Add partitions to Athena table",
                "ScheduleExpression": "cron(* ? * * * *)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "AddAthenaPartitions",
                                "Arn"
                            ]
                        },
                        "Id": "LambdaAddAthenaPartitions",
                        "Input": {
                            "Fn::Sub": [
                                "{\n  \"resourceType\": \"LambdaAddAthenaPartitionsEventsRule\",\n  \"glueAccessLogsDatabase\": \"${GlueAccessLogsDatabase}\",\n  \"accessLogBucket\": \"${AppAccessLogBucket}\",\n  \"glueAppAccessLogsTable\": \"${GlueAppAccessLogsTable}\",\n  \"glueWafAccessLogsTable\": \"${GlueWafAccessLogsTable}\",\n  \"wafLogBucket\": \"${WafLogBucket}\",\n  \"athenaWorkGroup\": \"${AthenaWorkGroup}\"\n}",
                                {
                                    "GlueAccessLogsDatabase": {
                                        "Fn::GetAtt": [
                                            "FirehoseAthenaStack",
                                            "Outputs.GlueAccessLogsDatabase"
                                        ]
                                    },
                                    "AppAccessLogBucket": {
                                        "Fn::If": [
                                            "ScannersProbesAthenaLogParser",
                                            {
                                                "Ref": "AppAccessLogBucket"
                                            },
                                            ""
                                        ]
                                    },
                                    "GlueAppAccessLogsTable": {
                                        "Fn::If": [
                                            "ScannersProbesAthenaLogParser",
                                            {
                                                "Fn::GetAtt": [
                                                    "FirehoseAthenaStack",
                                                    "Outputs.GlueAppAccessLogsTable"
                                                ]
                                            },
                                            ""
                                        ]
                                    },
                                    "GlueWafAccessLogsTable": {
                                        "Fn::If": [
                                            "HttpFloodAthenaLogParser",
                                            {
                                                "Fn::GetAtt": [
                                                    "FirehoseAthenaStack",
                                                    "Outputs.GlueWafAccessLogsTable"
                                                ]
                                            },
                                            ""
                                        ]
                                    },
                                    "WafLogBucket": {
                                        "Fn::If": [
                                            "HttpFloodAthenaLogParser",
                                            {
                                                "Ref": "WafLogBucket"
                                            },
                                            ""
                                        ]
                                    },
                                    "AthenaWorkGroup": {
                                        "Fn::GetAtt": [
                                            "FirehoseAthenaStack",
                                            "Outputs.WAFAddPartitionAthenaQueryWorkGroup"
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "SetIPRetentionEventsRule": {
            "Type": "AWS::Events::Rule",
            "Condition": "IPRetentionPeriod",
            "Properties": {
                "Description": "AWS WAF Security Automations - Events rule for setting IP retention",
                "EventPattern": {
                    "source": [
                        "aws.wafv2"
                    ],
                    "detail-type": [
                        "AWS API Call via CloudTrail"
                    ],
                    "detail": {
                        "eventSource": [
                            "wafv2.amazonaws.com"
                        ],
                        "eventName": [
                            "UpdateIPSet"
                        ],
                        "requestParameters": {
                            "name": [
                                {
                                    "Fn::GetAtt": [
                                        "WebACLStack",
                                        "Outputs.NameWAFWhitelistSetV4"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "WebACLStack",
                                        "Outputs.NameWAFBlacklistSetV4"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "WebACLStack",
                                        "Outputs.NameWAFWhitelistSetV6"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "WebACLStack",
                                        "Outputs.NameWAFBlacklistSetV6"
                                    ]
                                }
                            ]
                        }
                    }
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "SetIPRetention",
                                "Arn"
                            ]
                        },
                        "Id": "SetIPRetentionLambda"
                    }
                ]
            }
        },
        "LambdaInvokePermissionAppLogParserCloudWatch": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "ScannersProbesAthenaLogParser",
            "Properties": {
                "FunctionName": {
                    "Ref": "LogParser"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "LambdaAthenaAppLogParser",
                        "Arn"
                    ]
                }
            }
        },
        "ReputationListsParser": {
            "Type": "AWS::Lambda::Function",
            "Condition": "ReputationListsProtectionActivated",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W89",
                            "reason": "There is no need to run this lambda in a VPC"
                        },
                        {
                            "id": "W92",
                            "reason": "There is no need for Reserved Concurrency"
                        }
                    ]
                }
            },
            "Properties": {
                "Description": "This lambda function checks third-party IP reputation lists hourly for new IP ranges to block. These lists include the Spamhaus Dont Route Or Peer (DROP) and Extended Drop (EDROP) lists, the Proofpoint Emerging Threats IP list, and the Tor exit node list.",
                "Handler": "reputation-lists.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRoleReputationListsParser",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "SourceBucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "reputation_lists_parser.zip"
                            ]
                        ]
                    }
                },
                "Runtime": "python3.8",
                "MemorySize": 512,
                "Timeout": 300,
                "Environment": {
                    "Variables": {
                        "IP_SET_ID_REPUTATIONV4": {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.WAFReputationListsSetV4Arn"
                            ]
                        },
                        "IP_SET_ID_REPUTATIONV6": {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.WAFReputationListsSetV6Arn"
                            ]
                        },
                        "IP_SET_NAME_REPUTATIONV4": {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.NameReputationListsSetV4"
                            ]
                        },
                        "IP_SET_NAME_REPUTATIONV6": {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.NameReputationListsSetV6"
                            ]
                        },
                        "SCOPE": {
                            "Fn::If": [
                                "AlbEndpoint",
                                "REGIONAL",
                                "CLOUDFRONT"
                            ]
                        },
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        },
                        "URL_LIST": "[{\"url\":\"https://www.spamhaus.org/drop/drop.txt\"},{\"url\":\"https://www.spamhaus.org/drop/edrop.txt\"},{\"url\":\"https://check.torproject.org/exit-addresses\", \"prefix\":\"ExitAddress\"},{\"url\":\"https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt\"}]",
                        "SOLUTION_ID": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "SolutionID"
                            ]
                        },
                        "METRICS_URL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "MetricsURL"
                            ]
                        },
                        "STACK_NAME": {
                            "Ref": "AWS::StackName"
                        },
                        "LOG_TYPE": {
                            "Fn::If": [
                                "AlbEndpoint",
                                "alb",
                                "cloudfront"
                            ]
                        },
                        "SEND_ANONYMOUS_USAGE_DATA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "SendAnonymousUsageData"
                            ]
                        },
                        "IPREPUTATIONLIST_METRICNAME": {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.IPReputationListsMetricName"
                            ]
                        },
                        "USER_AGENT_EXTRA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "UserAgent",
                                "UserAgentExtra"
                            ]
                        }
                    }
                }
            }
        },
        "ReputationListsParserEventsRule": {
            "Condition": "ReputationListsProtectionActivated",
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Security Automation - WAF Reputation Lists",
                "ScheduleExpression": "rate(1 hour)",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "ReputationListsParser",
                                "Arn"
                            ]
                        },
                        "Id": "ReputationListsParser",
                        "Input": {
                            "Fn::Sub": [
                                "{\n  \"URL_LIST\": [\n    {\"url\":\"https://www.spamhaus.org/drop/drop.txt\"},\n    {\"url\":\"https://www.spamhaus.org/drop/edrop.txt\"},\n    {\"url\":\"https://check.torproject.org/exit-addresses\", \"prefix\":\"ExitAddress\"},\n    {\"url\":\"https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt\"}\n  ],\n  \"IP_SET_ID_REPUTATIONV4\": \"${IP_SET_ID_REPUTATIONV4}\",\n  \"IP_SET_ID_REPUTATIONV6\": \"${IP_SET_ID_REPUTATIONV6}\",\n  \"IP_SET_NAME_REPUTATIONV4\": \"${IP_SET_NAME_REPUTATIONV4}\",\n  \"IP_SET_NAME_REPUTATIONV6\": \"${IP_SET_NAME_REPUTATIONV6}\",\n  \"SCOPE\": \"${SCOPE}\"\n}",
                                {
                                    "IP_SET_ID_REPUTATIONV4": {
                                        "Fn::GetAtt": [
                                            "WebACLStack",
                                            "Outputs.WAFReputationListsSetV4Arn"
                                        ]
                                    },
                                    "IP_SET_ID_REPUTATIONV6": {
                                        "Fn::GetAtt": [
                                            "WebACLStack",
                                            "Outputs.WAFReputationListsSetV6Arn"
                                        ]
                                    },
                                    "IP_SET_NAME_REPUTATIONV4": {
                                        "Fn::GetAtt": [
                                            "WebACLStack",
                                            "Outputs.NameReputationListsSetV4"
                                        ]
                                    },
                                    "IP_SET_NAME_REPUTATIONV6": {
                                        "Fn::GetAtt": [
                                            "WebACLStack",
                                            "Outputs.NameReputationListsSetV6"
                                        ]
                                    },
                                    "SCOPE": "CLOUDFRONT"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "UpdateReputationListsOnLoad": {
            "Condition": "ReputationListsProtectionActivated",
            "Type": "Custom::UpdateReputationLists",
            "DependsOn": "WebACLStack",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "ReputationListsParser",
                        "Arn"
                    ]
                }
            }
        },
        "LambdaInvokePermissionReputationListsParser": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "ReputationListsProtectionActivated",
            "Properties": {
                "FunctionName": {
                    "Ref": "ReputationListsParser"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "ReputationListsParserEventsRule",
                        "Arn"
                    ]
                }
            }
        },
        "BadBotParser": {
            "Type": "AWS::Lambda::Function",
            "Condition": "BadBotProtectionActivated",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W89",
                            "reason": "There is no need to run this lambda in a VPC"
                        },
                        {
                            "id": "W92",
                            "reason": "There is no need for Reserved Concurrency"
                        }
                    ]
                }
            },
            "Properties": {
                "Description": "This lambda function will intercepts and inspects trap endpoint requests to extract its IP address, and then add it to an AWS WAF block list.",
                "Handler": "access-handler.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRoleBadBot",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "SourceBucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "access_handler.zip"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "SCOPE": {
                            "Fn::If": [
                                "AlbEndpoint",
                                "REGIONAL",
                                "CLOUDFRONT"
                            ]
                        },
                        "IP_SET_ID_BAD_BOTV4": {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.WAFBadBotSetV4Arn"
                            ]
                        },
                        "IP_SET_ID_BAD_BOTV6": {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.WAFBadBotSetV6Arn"
                            ]
                        },
                        "IP_SET_NAME_BAD_BOTV4": {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.NameBadBotSetV4"
                            ]
                        },
                        "IP_SET_NAME_BAD_BOTV6": {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.NameBadBotSetV6"
                            ]
                        },
                        "SEND_ANONYMOUS_USAGE_DATA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "SendAnonymousUsageData"
                            ]
                        },
                        "UUID": {
                            "Fn::GetAtt": [
                                "CreateUniqueID",
                                "UUID"
                            ]
                        },
                        "REGION": {
                            "Ref": "AWS::Region"
                        },
                        "LOG_TYPE": {
                            "Fn::If": [
                                "AlbEndpoint",
                                "alb",
                                "cloudfront"
                            ]
                        },
                        "METRIC_NAME_PREFIX": {
                            "Fn::Join": [
                                "",
                                {
                                    "Fn::Split": [
                                        "-",
                                        {
                                            "Ref": "AWS::StackName"
                                        }
                                    ]
                                }
                            ]
                        },
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        },
                        "SOLUTION_ID": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "SolutionID"
                            ]
                        },
                        "METRICS_URL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "MetricsURL"
                            ]
                        },
                        "STACK_NAME": {
                            "Ref": "AWS::StackName"
                        },
                        "USER_AGENT_EXTRA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "UserAgent",
                                "UserAgentExtra"
                            ]
                        }
                    }
                },
                "Runtime": "python3.8",
                "MemorySize": 128,
                "Timeout": 300
            }
        },
        "LambdaInvokePermissionBadBot": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "BadBotProtectionActivated",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "BadBotParser",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "ApiGatewayBadBot": {
            "Type": "AWS::ApiGateway::RestApi",
            "Condition": "BadBotProtectionActivated",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "Name": "Security Automation - WAF Bad Bot API",
                "Description": "API created by AWS WAF Security Automation CloudFormation template. This endpoint will be used to capture bad bots."
            }
        },
        "ApiGatewayBadBotResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Condition": "BadBotProtectionActivated",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayBadBot"
                },
                "ParentId": {
                    "Fn::GetAtt": [
                        "ApiGatewayBadBot",
                        "RootResourceId"
                    ]
                },
                "PathPart": "{proxy+}"
            }
        },
        "ApiGatewayBadBotMethodRoot": {
            "Type": "AWS::ApiGateway::Method",
            "Condition": "BadBotProtectionActivated",
            "DependsOn": "LambdaInvokePermissionBadBot",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayBadBot"
                },
                "ResourceId": {
                    "Fn::GetAtt": [
                        "ApiGatewayBadBot",
                        "RootResourceId"
                    ]
                },
                "HttpMethod": "ANY",
                "AuthorizationType": "NONE",
                "RequestParameters": {
                    "method.request.header.X-Forwarded-For": false
                },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BadBotParser.Arn}/invocations"
                    }
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W59",
                            "reason": "Creating a honeypot to lure badbots away."
                        }
                    ]
                }
            }
        },
        "ApiGatewayBadBotMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Condition": "BadBotProtectionActivated",
            "DependsOn": "LambdaInvokePermissionBadBot",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayBadBot"
                },
                "ResourceId": {
                    "Ref": "ApiGatewayBadBotResource"
                },
                "HttpMethod": "ANY",
                "AuthorizationType": "NONE",
                "RequestParameters": {
                    "method.request.header.X-Forwarded-For": false
                },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BadBotParser.Arn}/invocations"
                    }
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W59",
                            "reason": "Creating a honeypot to lure badbots away."
                        }
                    ]
                }
            }
        },
        "ApiGatewayBadBotDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "Condition": "BadBotProtectionActivated",
            "DependsOn": "ApiGatewayBadBotMethod",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayBadBot"
                },
                "Description": "CloudFormation Deployment Stage",
                "StageName": "CFDeploymentStage"
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W45",
                            "reason": "Log not needed for this component."
                        },
                        {
                            "id": "W68",
                            "reason": "Usage Plan not required."
                        }
                    ]
                }
            }
        },
        "ApiGatewayBadBotStage": {
            "Type": "AWS::ApiGateway::Stage",
            "Condition": "BadBotProtectionActivated",
            "Properties": {
                "DeploymentId": {
                    "Ref": "ApiGatewayBadBotDeployment"
                },
                "Description": "Production Stage",
                "RestApiId": {
                    "Ref": "ApiGatewayBadBot"
                },
                "StageName": "ProdStage",
                "AccessLogSetting": {
                    "DestinationArn": {
                        "Fn::GetAtt": [
                            "ApiGatewayBadBotStageAccessLogGroup",
                            "Arn"
                        ]
                    },
                    "Format": "{\"sourceIp\": \"$context.identity.sourceIp\", \"caller\": \"$context.identity.caller\", \"user\": \"$context.identity.user\", \"requestTime\": \"$context.requestTime\", \"httpMethod\": \"$context.httpMethod\", \"resourcePath\": \"$context.resourcePath\", \"protocol\": \"$context.protocol\", \"status\": \"$context.status\", \"responseLength\": \"$context.responseLength\", \"requestId\": \"$context.requestId\"}"
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W64",
                            "reason": "Usage Plan not required."
                        }
                    ]
                }
            }
        },
        "ApiGatewayBadBotStageAccessLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Condition": "BadBotProtectionActivated",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W84",
                            "reason": "Encryption not required: no sensitive data logged to CloudWatch."
                        },
                        {
                            "id": "W86",
                            "reason": "Leave the configuration of the expiration of the log data in CloudWatch log group to user due to potential compliance regulations."
                        }
                    ]
                }
            }
        },
        "ApiGatewayBadBotCloudWatchRole": {
            "Type": "AWS::IAM::Role",
            "Condition": "BadBotProtectionActivated",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "apigateway.amazonaws.com"
                            }
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "LambdaRestApiCloudWatchRole",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams",
                                        "logs:PutLogEvents",
                                        "logs:GetLogEvents",
                                        "logs:FilterLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ApiGatewayBadBotAccount": {
            "Type": "AWS::ApiGateway::Account",
            "Condition": "BadBotProtectionActivated",
            "Properties": {
                "CloudWatchRoleArn": {
                    "Fn::GetAtt": [
                        "ApiGatewayBadBotCloudWatchRole",
                        "Arn"
                    ]
                }
            },
            "DependsOn": [
                "ApiGatewayBadBot"
            ]
        },
        "CustomResource": {
            "Type": "AWS::Lambda::Function",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W89",
                            "reason": "There is no need to run this lambda in a VPC"
                        },
                        {
                            "id": "W92",
                            "reason": "There is no need for Reserved Concurrency"
                        }
                    ]
                }
            },
            "Properties": {
                "Description": "This lambda function configures the Web ACL rules based on the features enabled in the CloudFormation template.",
                "Handler": "custom-resource.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRoleCustomResource",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "SourceBucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "custom_resource.zip"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        },
                        "SCOPE": {
                            "Fn::If": [
                                "AlbEndpoint",
                                "REGIONAL",
                                "CLOUDFRONT"
                            ]
                        },
                        "SOLUTION_ID": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "SolutionID"
                            ]
                        },
                        "METRICS_URL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "MetricsURL"
                            ]
                        },
                        "USER_AGENT_EXTRA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "UserAgent",
                                "UserAgentExtra"
                            ]
                        }
                    }
                },
                "Runtime": "python3.8",
                "MemorySize": 128,
                "Timeout": 300
            }
        },
        "ConfigureAWSWAFLogs": {
            "Type": "Custom::ConfigureAWSWAFLogs",
            "Condition": "HttpFloodProtectionLogParserActivated",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CustomResource",
                        "Arn"
                    ]
                },
                "WAFWebACLArn": {
                    "Fn::GetAtt": [
                        "WebACLStack",
                        "Outputs.WAFWebACLArn"
                    ]
                },
                "DeliveryStreamArn": {
                    "Fn::GetAtt": [
                        "FirehoseAthenaStack",
                        "Outputs.FirehoseWAFLogsDeliveryStreamArn"
                    ]
                }
            }
        },
        "ConfigureAppAccessLogBucket": {
            "Type": "Custom::ConfigureAppAccessLogBucket",
            "Condition": "ScannersProbesProtectionActivated",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CustomResource",
                        "Arn"
                    ]
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "AppAccessLogBucket": {
                    "Ref": "AppAccessLogBucket"
                },
                "LogParser": {
                    "Fn::If": [
                        "LogParser",
                        {
                            "Fn::GetAtt": [
                                "LogParser",
                                "Arn"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "ScannersProbesLambdaLogParser": {
                    "Fn::If": [
                        "ScannersProbesLambdaLogParser",
                        "yes",
                        "no"
                    ]
                },
                "ScannersProbesAthenaLogParser": {
                    "Fn::If": [
                        "ScannersProbesAthenaLogParser",
                        "yes",
                        "no"
                    ]
                },
                "MoveS3LogsForPartition": {
                    "Fn::If": [
                        "ScannersProbesAthenaLogParser",
                        {
                            "Fn::GetAtt": [
                                "MoveS3LogsForPartition",
                                "Arn"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "AccessLoggingBucket": {
                    "Fn::If": [
                        "ScannersProbesProtectionActivated",
                        {
                            "Ref": "AccessLoggingBucket"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            }
        },
        "ConfigureWafLogBucket": {
            "Type": "Custom::ConfigureWafLogBucket",
            "Condition": "HttpFloodProtectionLogParserActivated",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CustomResource",
                        "Arn"
                    ]
                },
                "WafLogBucket": {
                    "Ref": "WafLogBucket"
                },
                "LogParser": {
                    "Fn::If": [
                        "LogParser",
                        {
                            "Fn::GetAtt": [
                                "LogParser",
                                "Arn"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "HttpFloodLambdaLogParser": {
                    "Fn::If": [
                        "HttpFloodLambdaLogParser",
                        "yes",
                        "no"
                    ]
                },
                "HttpFloodAthenaLogParser": {
                    "Fn::If": [
                        "HttpFloodAthenaLogParser",
                        "yes",
                        "no"
                    ]
                }
            }
        },
        "GenerateAppLogParserConfFile": {
            "Type": "Custom::GenerateAppLogParserConfFile",
            "Condition": "ScannersProbesLambdaLogParser",
            "DependsOn": "ConfigureAppAccessLogBucket",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CustomResource",
                        "Arn"
                    ]
                },
                "StackName": {
                    "Ref": "AWS::StackName"
                },
                "AppAccessLogBucket": {
                    "Ref": "AppAccessLogBucket"
                },
                "ErrorThreshold": {
                    "Ref": "ErrorThreshold"
                },
                "WAFBlockPeriod": {
                    "Ref": "WAFBlockPeriod"
                }
            }
        },
        "GenerateWafLogParserConfFile": {
            "Type": "Custom::GenerateWafLogParserConfFile",
            "Condition": "HttpFloodLambdaLogParser",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CustomResource",
                        "Arn"
                    ]
                },
                "StackName": {
                    "Ref": "AWS::StackName"
                },
                "WafAccessLogBucket": {
                    "Ref": "WafLogBucket"
                },
                "RequestThreshold": {
                    "Ref": "RequestThreshold"
                },
                "WAFBlockPeriod": {
                    "Ref": "WAFBlockPeriod"
                }
            }
        },
        "ConfigureWebAcl": {
            "Type": "Custom::ConfigureWebAcl",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CustomResource",
                        "Arn"
                    ]
                },
                "ActivateSqlInjectionProtectionParam": {
                    "Ref": "ActivateSqlInjectionProtectionParam"
                },
                "ActivateCrossSiteScriptingProtectionParam": {
                    "Ref": "ActivateCrossSiteScriptingProtectionParam"
                },
                "ActivateHttpFloodProtectionParam": {
                    "Ref": "ActivateHttpFloodProtectionParam"
                },
                "ActivateScannersProbesProtectionParam": {
                    "Ref": "ActivateScannersProbesProtectionParam"
                },
                "ActivateReputationListsProtectionParam": {
                    "Ref": "ActivateReputationListsProtectionParam"
                },
                "ActivateBadBotProtectionParam": {
                    "Ref": "ActivateBadBotProtectionParam"
                },
                "ActivateAWSManagedRulesParam": {
                    "Ref": "ActivateAWSManagedRulesParam"
                },
                "KeepDataInOriginalS3Location": {
                    "Ref": "KeepDataInOriginalS3Location"
                },
                "IPRetentionPeriodAllowedParam": {
                    "Ref": "IPRetentionPeriodAllowedParam"
                },
                "IPRetentionPeriodDeniedParam": {
                    "Ref": "IPRetentionPeriodDeniedParam"
                },
                "SNSEmailParam": {
                    "Fn::If": [
                        "SNSEmail",
                        "yes",
                        "no"
                    ]
                },
                "WAFWebACL": {
                    "Fn::GetAtt": [
                        "WebACLStack",
                        "Outputs.WAFWebACL"
                    ]
                },
                "WAFWhitelistSetIPV4": {
                    "Fn::GetAtt": [
                        "WebACLStack",
                        "Outputs.WAFWhitelistSetV4Id"
                    ]
                },
                "WAFBlacklistSetIPV4": {
                    "Fn::GetAtt": [
                        "WebACLStack",
                        "Outputs.WAFBlacklistSetV4Id"
                    ]
                },
                "WAFHttpFloodSetIPV4": {
                    "Fn::If": [
                        "HttpFloodProtectionLogParserActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.WAFHttpFloodSetV4Id"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFScannersProbesSetIPV4": {
                    "Fn::If": [
                        "ScannersProbesProtectionActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.WAFScannersProbesSetV4Id"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFReputationListsSetIPV4": {
                    "Fn::If": [
                        "ReputationListsProtectionActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.WAFReputationListsSetV4Id"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFBadBotSetIPV4": {
                    "Fn::If": [
                        "BadBotProtectionActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.WAFBadBotSetV4Id"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFWhitelistSetIPV6": {
                    "Fn::GetAtt": [
                        "WebACLStack",
                        "Outputs.WAFWhitelistSetV6Id"
                    ]
                },
                "WAFBlacklistSetIPV6": {
                    "Fn::GetAtt": [
                        "WebACLStack",
                        "Outputs.WAFBlacklistSetV6Id"
                    ]
                },
                "WAFHttpFloodSetIPV6": {
                    "Fn::If": [
                        "HttpFloodProtectionLogParserActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.WAFHttpFloodSetV6Id"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFScannersProbesSetIPV6": {
                    "Fn::If": [
                        "ScannersProbesProtectionActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.WAFScannersProbesSetV6Id"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFReputationListsSetIPV6": {
                    "Fn::If": [
                        "ReputationListsProtectionActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.WAFReputationListsSetV6Id"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFBadBotSetIPV6": {
                    "Fn::If": [
                        "BadBotProtectionActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.WAFBadBotSetV6Id"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFWhitelistSetIPV4Name": {
                    "Fn::GetAtt": [
                        "WebACLStack",
                        "Outputs.NameWAFWhitelistSetV4"
                    ]
                },
                "WAFBlacklistSetIPV4Name": {
                    "Fn::GetAtt": [
                        "WebACLStack",
                        "Outputs.NameWAFBlacklistSetV4"
                    ]
                },
                "WAFHttpFloodSetIPV4Name": {
                    "Fn::If": [
                        "HttpFloodProtectionLogParserActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.NameHttpFloodSetV4"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFScannersProbesSetIPV4Name": {
                    "Fn::If": [
                        "ScannersProbesProtectionActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.NameScannersProbesSetV4"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFReputationListsSetIPV4Name": {
                    "Fn::If": [
                        "ReputationListsProtectionActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.NameReputationListsSetV4"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFBadBotSetIPV4Name": {
                    "Fn::If": [
                        "BadBotProtectionActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.NameBadBotSetV4"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFWhitelistSetIPV6Name": {
                    "Fn::GetAtt": [
                        "WebACLStack",
                        "Outputs.NameWAFWhitelistSetV6"
                    ]
                },
                "WAFBlacklistSetIPV6Name": {
                    "Fn::GetAtt": [
                        "WebACLStack",
                        "Outputs.NameWAFBlacklistSetV6"
                    ]
                },
                "WAFHttpFloodSetIPV6Name": {
                    "Fn::If": [
                        "HttpFloodProtectionLogParserActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.NameHttpFloodSetV6"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFScannersProbesSetIPV6Name": {
                    "Fn::If": [
                        "ScannersProbesProtectionActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.NameScannersProbesSetV6"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFReputationListsSetIPV6Name": {
                    "Fn::If": [
                        "ReputationListsProtectionActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.NameReputationListsSetV6"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFBadBotSetIPV6Name": {
                    "Fn::If": [
                        "BadBotProtectionActivated",
                        {
                            "Fn::GetAtt": [
                                "WebACLStack",
                                "Outputs.NameBadBotSetV6"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "UUID": {
                    "Fn::GetAtt": [
                        "CreateUniqueID",
                        "UUID"
                    ]
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "RequestThreshold": {
                    "Ref": "RequestThreshold"
                },
                "ErrorThreshold": {
                    "Ref": "ErrorThreshold"
                },
                "WAFBlockPeriod": {
                    "Ref": "WAFBlockPeriod"
                },
                "Version": "v3.2.0",
                "SendAnonymousUsageData": {
                    "Fn::FindInMap": [
                        "Solution",
                        "Data",
                        "SendAnonymousUsageData"
                    ]
                }
            }
        },
        "CustomAddAthenaPartitions": {
            "Type": "Custom::AddAthenaPartitions",
            "Condition": "AthenaLogParser",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CustomResource",
                        "Arn"
                    ]
                },
                "AddAthenaPartitionsLambda": {
                    "Fn::GetAtt": [
                        "AddAthenaPartitions",
                        "Arn"
                    ]
                },
                "ResourceType": "CustomResource",
                "GlueAccessLogsDatabase": {
                    "Fn::GetAtt": [
                        "FirehoseAthenaStack",
                        "Outputs.GlueAccessLogsDatabase"
                    ]
                },
                "AppAccessLogBucket": {
                    "Fn::If": [
                        "ScannersProbesAthenaLogParser",
                        {
                            "Ref": "AppAccessLogBucket"
                        },
                        ""
                    ]
                },
                "GlueAppAccessLogsTable": {
                    "Fn::If": [
                        "ScannersProbesAthenaLogParser",
                        {
                            "Fn::GetAtt": [
                                "FirehoseAthenaStack",
                                "Outputs.GlueAppAccessLogsTable"
                            ]
                        },
                        ""
                    ]
                },
                "GlueWafAccessLogsTable": {
                    "Fn::If": [
                        "HttpFloodAthenaLogParser",
                        {
                            "Fn::GetAtt": [
                                "FirehoseAthenaStack",
                                "Outputs.GlueWafAccessLogsTable"
                            ]
                        },
                        ""
                    ]
                },
                "WafLogBucket": {
                    "Fn::If": [
                        "HttpFloodAthenaLogParser",
                        {
                            "Ref": "WafLogBucket"
                        },
                        ""
                    ]
                },
                "AthenaWorkGroup": {
                    "Fn::GetAtt": [
                        "FirehoseAthenaStack",
                        "Outputs.WAFAddPartitionAthenaQueryWorkGroup"
                    ]
                }
            }
        },
        "MonitoringDashboard": {
            "Type": "AWS::CloudWatch::Dashboard",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "DashboardName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}"
                },
                "DashboardBody": {
                    "Fn::Sub": [
                        "{\n  \"widgets\": [{\n    \"type\": \"metric\",\n    \"x\": 0,\n    \"y\": 0,\n    \"width\": 15,\n    \"height\": 10,\n    \"properties\": {\n      \"view\": \"timeSeries\",\n      \"stacked\": false,\n      \"stat\": \"Sum\",\n      \"period\": 300,\n      \"metrics\": [\n        [\"WAF\", \"BlockedRequests\", \"WebACL\", \"${WAFWebACLMetricName}\", \"Rule\", \"ALL\" ${RegionMetric}],\n        [\"WAF\", \"AllowedRequests\", \"WebACL\", \"${WAFWebACLMetricName}\", \"Rule\", \"ALL\" ${RegionMetric}]\n      ],\n      \"region\": \"${RegionProperties}\"\n    }\n  }]\n}",
                        {
                            "WAFWebACLMetricName": {
                                "Fn::GetAtt": [
                                    "WebACLStack",
                                    "Outputs.WAFWebACLMetricName"
                                ]
                            },
                            "RegionMetric": {
                                "Fn::If": [
                                    "AlbEndpoint",
                                    {
                                        "Fn::Sub": ", \"Region\", \"${AWS::Region}\""
                                    },
                                    ""
                                ]
                            },
                            "RegionProperties": {
                                "Fn::If": [
                                    "AlbEndpoint",
                                    {
                                        "Fn::Sub": "${AWS::Region}"
                                    },
                                    "us-east-1"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "IPRetentionDDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Condition": "IPRetentionPeriod",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "IPSetId",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "ExpirationTime",
                        "AttributeType": "N"
                    }
                ],
                "BillingMode": "PAY_PER_REQUEST",
                "KeySchema": [
                    {
                        "AttributeName": "IPSetId",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "ExpirationTime",
                        "KeyType": "RANGE"
                    }
                ],
                "SSESpecification": {
                    "SSEEnabled": true,
                    "SSEType": "KMS"
                },
                "StreamSpecification": {
                    "StreamViewType": "OLD_IMAGE"
                },
                "TimeToLiveSpecification": {
                    "AttributeName": "ExpirationTime",
                    "Enabled": true
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W78",
                            "reason": "This DynamoDB table constains transactional ip retention data that will be expired by DynamoDB TTL. The data doesn't need to be retained after its lifecycle ends."
                        }
                    ]
                }
            }
        },
        "IPExpirationSNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Condition": "SNSEmail",
            "Properties": {
                "DisplayName": "AWS WAF Security Automations IP Expiration Notification",
                "TopicName": {
                    "Fn::Join": [
                        "-",
                        [
                            "AWS-WAF-Security-Automations-IP-Expiration-Notification",
                            {
                                "Fn::GetAtt": [
                                    "CreateUniqueID",
                                    "UUID"
                                ]
                            }
                        ]
                    ]
                },
                "KmsMasterKeyId": "alias/aws/sns"
            }
        },
        "IPExpirationEmailNotification": {
            "Type": "AWS::SNS::Subscription",
            "Condition": "SNSEmail",
            "Properties": {
                "Endpoint": {
                    "Ref": "SNSEmailParam"
                },
                "Protocol": "email",
                "TopicArn": {
                    "Ref": "IPExpirationSNSTopic"
                }
            }
        },
        "SNSNotificationPolicy": {
            "Type": "AWS::SNS::TopicPolicy",
            "Condition": "SNSEmail",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "F18",
                            "reason": "Condition restricts permissions to current account."
                        }
                    ]
                }
            },
            "Properties": {
                "Topics": [
                    {
                        "Ref": "IPExpirationSNSTopic"
                    }
                ],
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Sid": "__default_statement_ID",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": "*"
                            },
                            "Action": [
                                "SNS:GetTopicAttributes",
                                "SNS:SetTopicAttributes",
                                "SNS:AddPermission",
                                "SNS:RemovePermission",
                                "SNS:DeleteTopic",
                                "SNS:Subscribe",
                                "SNS:ListSubscriptionsByTopic",
                                "SNS:Publish",
                                "SNS:Receive"
                            ],
                            "Resource": {
                                "Ref": "IPExpirationSNSTopic"
                            },
                            "Condition": {
                                "StringEquals": {
                                    "AWS:SourceOwner": {
                                        "Fn::Sub": "${AWS::AccountId}"
                                    }
                                }
                            }
                        },
                        {
                            "Sid": "TrustLambdaToPublishEventsToMyTopic",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "SNS:Publish",
                            "Resource": {
                                "Ref": "IPExpirationSNSTopic"
                            }
                        },
                        {
                            "Sid": "AllowPublishThroughSSLOnly",
                            "Action": "SNS:Publish",
                            "Effect": "Deny",
                            "Resource": [
                                {
                                    "Ref": "IPExpirationSNSTopic"
                                }
                            ],
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            },
                            "Principal": "*"
                        }
                    ]
                }
            }
        },
        "DDBStreamToLambdaESMapping": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Condition": "IPRetentionPeriod",
            "Properties": {
                "Enabled": true,
                "EventSourceArn": {
                    "Fn::GetAtt": [
                        "IPRetentionDDBTable",
                        "StreamArn"
                    ]
                },
                "FunctionName": {
                    "Fn::GetAtt": [
                        "RemoveExpiredIP",
                        "Arn"
                    ]
                },
                "StartingPosition": "LATEST"
            }
        }
    },
    "Outputs": {
        "BadBotHoneypotEndpoint": {
            "Description": "Bad Bot Honeypot Endpoint",
            "Value": {
                "Fn::Sub": "https://${ApiGatewayBadBot}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayBadBotStage}"
            },
            "Condition": "BadBotProtectionActivated"
        },
        "WAFWebACL": {
            "Description": "AWS WAF WebACL",
            "Value": {
                "Fn::GetAtt": [
                    "WebACLStack",
                    "Outputs.WAFWebACL"
                ]
            }
        },
        "WAFWebACLArn": {
            "Description": "AWS WAF WebACL Arn",
            "Value": {
                "Fn::GetAtt": [
                    "WebACLStack",
                    "Outputs.WAFWebACLArn"
                ]
            }
        },
        "WafLogBucket": {
            "Value": {
                "Ref": "WafLogBucket"
            },
            "Condition": "HttpFloodProtectionLogParserActivated"
        },
        "AppAccessLogBucket": {
            "Value": {
                "Ref": "AppAccessLogBucket"
            },
            "Condition": "ScannersProbesProtectionActivated"
        },
        "SolutionVersion": {
            "Description": "Solution Version Number",
            "Value": "v3.2.0"
        }
    }
}